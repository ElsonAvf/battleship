import Gameboard from './Gameboard.js'
import Ship from './../Ship/Ship.js'
import Square from './../Square/Square.js'

test('Can place on axis X to be true', () => {
  const ship = new Ship(4)
  const gameboard = new Gameboard()
  expect(gameboard.canPlaceShipOnAxisX(ship.length, [0, 6])).toBe(true)
})
test('Can place on axis X to be false', () => {
  const ship = new Ship(5)
  const gameboard = new Gameboard()
  expect(gameboard.canPlaceShipOnAxisX(ship.length, [0, 6])).toBe(false)
})
test('Can place on axis Y to be true', () => {
  const ship = new Ship(3)
  const gameboard = new Gameboard()
  expect(gameboard.canPlaceShipOnAxisY(ship.length, [0, 0])).toBe(true)
})
test('Can place on axis Y to be false', () => {
  const ship = new Ship(5)
  const gameboard = new Gameboard()
  expect(gameboard.canPlaceShipOnAxisY(ship.length, [6, 0])).toBe(false)
})
test('Place a ship on board axis X', () => {
  const ship = new Ship(2)
  const gameboard = new Gameboard()
  gameboard.placeShip(ship, [0, 0])
  expect(gameboard.board[0][0].value instanceof Ship).toBe(true)
  expect(gameboard.board[0][1].value instanceof Ship).toBe(true)
})
test('Place a ship on board axis X', () => {
  const ship = new Ship(4)
  const gameboard = new Gameboard()
  gameboard.placeShip(ship, [0, 6])
  expect(gameboard.board[0][6].value instanceof Ship).toBe(true)
  expect(gameboard.board[0][7].value instanceof Ship).toBe(true)
  expect(gameboard.board[0][8].value instanceof Ship).toBe(true)
  expect(gameboard.board[0][9].value instanceof Ship).toBe(true)
})
test('Place a ship on the board axis Y', () => {
  const ship = new Ship(4)
  const gameboard = new Gameboard()
  gameboard.placeShip(ship, [6, 0], 'y')
  expect(gameboard.board[6][0].value instanceof Ship).toBe(true)
  expect(gameboard.board[7][0].value instanceof Ship).toBe(true)
  expect(gameboard.board[8][0].value instanceof Ship).toBe(true)
  expect(gameboard.board[9][0].value instanceof Ship).toBe(true)
})
test('Not to be instance of ship2', () => {
  const ship1 = new Ship(2)
  const ship2 = new Ship(2)
  const gameboard = new Gameboard()
  gameboard.placeShip(ship1, [6, 0], 'y')
  gameboard.placeShip(ship2, [0, 5])
  expect(gameboard.board[6][0].value).toBe(ship1)
  expect(gameboard.board[7][0].value).not.toBe(ship2)
})
test('Dont place if square is not empty', () => {
  const ship1 = new Ship(2)
  const ship2 = new Ship(2)
  const gameboard = new Gameboard()
  gameboard.placeShip(ship1, [6, 0], 'y')
  gameboard.placeShip(ship2, [6, 0], 'y')
  expect(gameboard.board[6][0].value).toBe(ship1)
  expect(gameboard.board[6][0].value).not.toBe(ship2)
})
test('Receive Attack', () => {
  const gameboard = new Gameboard()
  gameboard.placeShip(new Ship(1), [0, 0])
  gameboard.receiveAttack([0, 0])
  expect(gameboard.board[0][0].wasClicked).toBe(true)
  expect(gameboard.board[0][0].value.hits).toBe(1)
})
test('Receive two hits', () => {
  const gameboard = new Gameboard()
  gameboard.placeShip(new Ship(2), [0, 0])
  gameboard.receiveAttack([0, 0])
  gameboard.receiveAttack([0, 0])
  gameboard.receiveAttack([0, 1])
  expect(gameboard.board[0][0].value.hits).toBe(2)
})
test('Receive one hit when click twice on the same square', () => {
  const gameboard = new Gameboard()
  gameboard.placeShip(new Ship(2), [0, 0])
  gameboard.receiveAttack([0, 0])
  gameboard.receiveAttack([0, 0])
  expect(gameboard.board[0][0].value.hits).toBe(1)
})
test('All Sunk to be true', () => {
  const gameboard = new Gameboard()
  const ship1 = new Ship(1)
  const ship2 = new Ship(1)
  gameboard.placeShip(ship1, [0, 0])
  gameboard.placeShip(ship2, [3, 2], 'y')
  gameboard.receiveAttack([0, 0])
  gameboard.receiveAttack([3, 2])
  expect(gameboard.areAllSunk()).toBe(true)
})
test('All Sunk to be false', () => {
  const gameboard = new Gameboard()
  const ship1 = new Ship(1)
  const ship2 = new Ship(1)
  gameboard.placeShip(ship1, [0, 0])
  gameboard.placeShip(ship2, [3, 2], 'y')
  gameboard.receiveAttack([0, 0])
  expect(gameboard.areAllSunk()).toBe(false)
})
test('Dont place ships next to each other Axis X', () => {
  const gameboard = new Gameboard()
  const ship1 = new Ship(1)
  const ship2 = new Ship(1)
  gameboard.placeShip(ship1, [0,0])
  gameboard.placeShip(ship2, [0,1])
  expect(gameboard.board[1][0].value).toBe(null)
})
test('Dont place ships next to each other Axis Y', () => {
  const gameboard = new Gameboard()
  const ship1 = new Ship(1)
  const ship2 = new Ship(1)
  gameboard.placeShip(ship1, [0,0])
  gameboard.placeShip(ship2, [1,0])
  expect(gameboard.board[1][0].value).toBe(null)
})
test('Dont place ships next to each other Axis diagonal', () => {
  const gameboard = new Gameboard()
  const ship1 = new Ship(1)
  const ship2 = new Ship(1)
  const ship3 = new Ship(1)
  const ship4 = new Ship(1)
  const ship5 = new Ship(1)
  gameboard.placeShip(ship1, [3,3])
  gameboard.placeShip(ship2, [2,4])
  gameboard.placeShip(ship3, [2,2])
  gameboard.placeShip(ship4, [4,1])
  gameboard.placeShip(ship5, [4,4])
  expect(gameboard.board[2][4].value).toBe(null)
  expect(gameboard.board[2][2].value).toBe(null)
  expect(gameboard.board[4][2].value).toBe(null)
  expect(gameboard.board[4][4].value).toBe(null)
})
test('Place if the ships were at least on square apart', () => {
  const gameboard = new Gameboard()
  const ship1 = new Ship(1)
  const ship2 = new Ship(1)
  gameboard.placeShip(ship1, [0,0])
  gameboard.placeShip(ship2, [0,2])
  expect(gameboard.board[0][2].value).toBeInstanceOf(Ship)
})
